openapi: 3.0.2
info:
  title: Swagger - Customer Demo
  description: "This is for demo of the swagger code gen using spring boot"
  termsOfService: http://swagger.io/terms/
  contact:
    email: petros.stergioulas94@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
externalDocs:
  description: Find out more about Reflectoring
  url: https://localhost:8080/about/
servers:
- url: http://localhost:8080/v2
tags:
- name: customer
  description: Operations about customer
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /customer:
    post:
      tags:
      - customer
      summary: Create customer
      description: Create customer functionality
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        201:
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request exception
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /customer/{customername}:
    get:
      tags:
      - customer
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: customername
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          description: User not found
          content: {}
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    Error:
      type: object
      properties:
        errorCode:
          type: integer
          format: int64
        errorMessage:
          type: string
        reason:
          type: string
